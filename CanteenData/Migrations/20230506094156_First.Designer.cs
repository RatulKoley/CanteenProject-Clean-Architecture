// <auto-generated />
using System;
using CanteenData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CanteenData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230506094156_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CanteenData.Model.FoodMapping", b =>
                {
                    b.Property<int>("MappingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MappingID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("FoodID")
                        .HasColumnType("int");

                    b.Property<double?>("FoodQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<double?>("ItemQuantity")
                        .HasColumnType("float");

                    b.HasKey("MappingID");

                    b.HasIndex("FoodID");

                    b.HasIndex("ItemId");

                    b.ToTable("FoodMapping");
                });

            modelBuilder.Entity("CanteenData.Model.FoodMenu", b =>
                {
                    b.Property<int>("FoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodID"), 1L, 1);

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("FoodID");

                    b.ToTable("FoodMenu");
                });

            modelBuilder.Entity("CanteenData.Model.Item", b =>
                {
                    b.Property<int>("ItemCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemCode"), 1L, 1);

                    b.Property<string>("Image")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("ReorderLevel")
                        .HasColumnType("float");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ItemCode");

                    b.HasIndex("UnitId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("CanteenData.Model.KitchenFood", b =>
                {
                    b.Property<int>("KitchenFoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitchenFoodID"), 1L, 1);

                    b.Property<int?>("FoodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("QuantityPrepared")
                        .HasColumnType("float");

                    b.HasKey("KitchenFoodID");

                    b.HasIndex("FoodID")
                        .IsUnique()
                        .HasFilter("[FoodID] IS NOT NULL");

                    b.ToTable("KitchenFood");
                });

            modelBuilder.Entity("CanteenData.Model.Purchase", b =>
                {
                    b.Property<int>("PurchaseNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseNo"), 1L, 1);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchasedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PurchasedValue")
                        .HasColumnType("float");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<int?>("SupplyId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseNo");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplyId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("CanteenData.Model.Sales", b =>
                {
                    b.Property<int>("SalesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesID"), 1L, 1);

                    b.Property<double?>("Cash")
                        .HasColumnType("float");

                    b.Property<double?>("Credit")
                        .HasColumnType("float");

                    b.Property<int?>("CreditCardNo")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CustomerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KitchenFoodID")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<double?>("UPI")
                        .HasColumnType("float");

                    b.HasKey("SalesID");

                    b.HasIndex("KitchenFoodID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("CanteenData.Model.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockID"), 1L, 1);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<double?>("Qunatity")
                        .HasColumnType("float");

                    b.HasKey("StockID");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasFilter("[ItemId] IS NOT NULL");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("CanteenData.Model.Supply", b =>
                {
                    b.Property<int>("SupplyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyID"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SupplyID");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("CanteenData.Model.Unit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("CanteenData.Model.FoodMapping", b =>
                {
                    b.HasOne("CanteenData.Model.FoodMenu", "FoodMenu")
                        .WithMany("FoodMapping")
                        .HasForeignKey("FoodID");

                    b.HasOne("CanteenData.Model.Item", "Item")
                        .WithMany("FoodMapping")
                        .HasForeignKey("ItemId");

                    b.Navigation("FoodMenu");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CanteenData.Model.Item", b =>
                {
                    b.HasOne("CanteenData.Model.Unit", "Unit")
                        .WithMany("Item")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CanteenData.Model.KitchenFood", b =>
                {
                    b.HasOne("CanteenData.Model.FoodMenu", "FoodMenu")
                        .WithOne("KitchenFood")
                        .HasForeignKey("CanteenData.Model.KitchenFood", "FoodID");

                    b.Navigation("FoodMenu");
                });

            modelBuilder.Entity("CanteenData.Model.Purchase", b =>
                {
                    b.HasOne("CanteenData.Model.Item", "Item")
                        .WithMany("Purchase")
                        .HasForeignKey("ItemId");

                    b.HasOne("CanteenData.Model.Supply", "Supply")
                        .WithMany("Purchase")
                        .HasForeignKey("SupplyId");

                    b.Navigation("Item");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("CanteenData.Model.Sales", b =>
                {
                    b.HasOne("CanteenData.Model.KitchenFood", "KitchenFood")
                        .WithMany("Sales")
                        .HasForeignKey("KitchenFoodID");

                    b.Navigation("KitchenFood");
                });

            modelBuilder.Entity("CanteenData.Model.Stock", b =>
                {
                    b.HasOne("CanteenData.Model.Item", "Item")
                        .WithOne("Stock")
                        .HasForeignKey("CanteenData.Model.Stock", "ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CanteenData.Model.FoodMenu", b =>
                {
                    b.Navigation("FoodMapping");

                    b.Navigation("KitchenFood");
                });

            modelBuilder.Entity("CanteenData.Model.Item", b =>
                {
                    b.Navigation("FoodMapping");

                    b.Navigation("Purchase");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("CanteenData.Model.KitchenFood", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("CanteenData.Model.Supply", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("CanteenData.Model.Unit", b =>
                {
                    b.Navigation("Item");
                });
#pragma warning restore 612, 618
        }
    }
}
